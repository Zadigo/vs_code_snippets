{
	"Create basic views": {
		"prefix": "django-views",
		"body": [
			"from django.http import request",
			"from django.contrib.auth.mixins import LoginRequiredMixin",
			"from django.views.generic import ListView, CreateView, UpdateView, DetailView, View, DeleteView",
			"\n",
			"class ${1}(View):",
			"\tdef get(self, request, *args, **kwargs):",
			"\t\treturn render(request, '${2}.html', context)",
			"\n",
			"\tdef post(self, request, **kwargs):",
			"\t\treturn render(request, '${2}.html', context)",
			"\n",
			"class ${1}(ListView):",
			"\tmodel = ${model}",
			"\tcontext_object_name = '${4}'",
			"\n",
			"class ${1}(DetailView):",
			"\tmodel = ${model}",
			"\tcontext_object_name = '${4}'",
			"\ttemplate_name = '${9}/${10}.html'",
			"\n",
			"class ${6}(${LoginRequiredMixin,} CreateView):",
			"\tmodel = ${model}",
			"\tform_class = {8:form}",
			"\ttemplate_name = '${9}/${10}.html'",
			"\tsuccess_url = '/${11}/'",
			"\n",
			"class ${12}Update(${LoginRequiredMixin,} UpdateView):",
			"\tmodel = ${model}",
			"\tform_class = {13:form}",
			"\ttemplate_name = '${}/{}.html'",
			"\tsuccess_url = '/${}/'",
			"\n",
			"class ${12}Update(${LoginRequiredMixin,} DeleteView):",
			"\tmodel = ${model}",
			"\ttemplate_name = '${}/{}.html'",
			"\tsuccess_url = '/${}/'"
		],
		"description": "Create basic views"
	},
	"Create basic view": {
		"prefix": "django-view",
		"body": [
			"class ${1}View(View):",
			"\tdef get(self, request, *args, **kwargs):",
			"\tcontext = {}",
			"\t\treturn render(request, '${2}/${3}.html', context)",
			"\n",
			"\tdef post(self, request, **kwargs):",
			"\t\treturn render(request, '{2}/${4}.html')"
		],
		"description": "Create basic view"
	},
	"Create basic redirect view": {
		"prefix": "django-redirect-view",
		"body": [
			"class ${1}View(View):",
			"\tdef get(self, request, *args, **kwargs):",
			"\t\treturn redirect('${2}')"
		],
		"description": "Create basic redirect view"
	},
	"Return render": {
		"prefix": "django-return-render",
		"body": [
			"return render(request, '${1}.html', {})"
		],
		"description": "Return render"
	},
	"Return render context": {
		"prefix": "django-return-render-context",
		"body": [
			"context = {}",
			"return render(request, '${1}.html', context)"
		],
		"description": "Return render context"
	},
	"Decorator": {
		"prefix": "py-decorator",
		"body": [
			"def ${name}(function):",
			"\tdef ${name}(*args, **kwargs):",
			"\t\t\tfunction()",
			"\treturn ${name}",
			"\n",
			"@${name}",
			"def ${to_decorate}():",
			"\treturn 'To decorate'"
		],
		"description": "Decorator"
	},
	"Subclass": {
		"prefix": "py-subclass",
		"body": [
			"class ${Name}:",
			"\tpass",
			"\n",
			"class ${Subname}(${Name}):",
			"\tpass"
		],
		"description": "Subclass"
	},
	"Urls": {
		"prefix": "django-urls",
		"body": [
			"from django.conf.urls import url",
			"from $1 import views",
			"\n",
			"urlpatterns = [",
			"\turl(r'^${url}', views.${view_name}.as_view(), name='${name}'),",
			"]"
		],
		"description": "Django Urls"
	},
	"Model": {
		"prefix": "django-model",
		"body": [
			"class ${Name}(models.Model):",
			"\n",
			"def __str__(self):",
			"\treturn $1",
			"\n",
			"def get_absolute_url(self):",
			"\treturn reverse('${path}', args=[str(self.pk)])"
		],
		"description": "Model"
	},
	"Django post save": {
		"prefix": "django-post-save",
		"body": [
			"from django.db.models.signals import post_save",
			"from django.dispatch import receiver",
			"\n",
			"@receiver(post_save, sender=${model})",
			"def ${defintion_name}(sender, instance, created, **kwargs):",
			"\tif created:",
			"\t\tinstance.${object}",
			"\t\tinstance.save()"
		],
		"description": "Django post save definition"
	},
	"Django pre save": {
		"prefix": "django-pre-save",
		"body": [
			"from django.db.models.signals import post_save",
			"from django.dispatch import receiver",
			"\n",
			"@receiver(pre_save, sender=${model})",
			"def ${defintion_name}(sender, instance, **kwargs):",
			"\tif instance.${object}:",
			"\t\tinstance.${object}",
		],
		"description": "Django pre save definition"
	},
	"Django social registration": {
		"prefix": "Django Social networks registration",
		"body": [
			"# Copy each elements in their respective sections",
			"# See https://simpleisbetterthancomplex.com/tutorial/2016/10/24/how-to-add-social-login-to-django.html for more informations",
			"# Run 'pip install social-auth-app-django' to install social Django",
			"\n",
			"# Copy in installed applications",
			"'social_django',",
			"\n",
			"# Copy in Middleware",
			"'social_django.middleware.SocialAuthExceptionMiddleware'",
			"\n",
			"# Copy in templates context processor",
			"'social_django.context_processors.backends',",
			"'social_django.context_processors.login_redirect',",
			"\n",
			"# Copy in authentication backend",
			"'social_core.backends.github.GithubOAuth2'",
			"'social_core.backends.twitter.TwitterOAuth'",
			"'social_core.backends.open_id.OpenIdAuth',",
			"'social_core.backends.google.GoogleOpenId',",
			"'social_core.backends.google.GoogleOAuth2',",
			"'social_core.backends.facebook.FacebookOAuth2',",
			"'social.backends.linkedin.LinkedinOAuth2',",
			"\n",
			"# Copy in settings",
			"LOGIN_URL = 'login'",
			"\n",
			"LOGOUT_URL = 'logout'",
			"\n",
			"LOGIN_REDIRECT_URL = 'profile'",
			"\n",
			"SOCIAL_AUTH_TWITTER_KEY = ''",
			"\n",
			"SOCIAL_AUTH_TWITTER_SECRET = ''",
			"\n",
			"SOCIAL_AUTH_GOOGLE_OAUTH2_KEY =''",
			"\n",
			"SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = ''",
			"\n",
			"SOCIAL_AUTH_LINKEDIN_OAUTH2_KEY = ''",
			"\n",
			"SOCIAL_AUTH_LINKEDIN_OAUTH2_SECRET = ''",
			"\n",
			"SOCIAL_AUTH_LINKEDIN_SCOPE = ['r_basicprofile']",
			"\n",
			"SOCIAL_AUTH_LINKEDIN_FIELD_SELECTORS = ['email-address', 'headline', 'industry']",
			"\n",
			"SOCIAL_AUTH_LINKEDIN_EXTRA_DATA = [('id', 'id'),",
                        "\t\t\t\t\t('firstName', 'first_name'),",
                        "\t\t\t\t\t('lastName', 'last_name'),",
                        "\t\t\t\t\t('emailAddress', 'email_address'),",
                        "\t\t\t\t\t('headline', 'headline'),",
                        "\t\t\t\t\t('industry', 'industry')]",
			"\n",
			"# Copy in your registration URLS file",
			"url(r'^oauth/', include('social_django.urls', namespace='social')),"
		],
		"description": "Login and signup with social networks"
	},
	"Django Settings AWS": {
		"prefix": "django-aws-settings",
		"body": [
			"# https://simpleisbetterthancomplex.com/tutorial/2017/08/01/how-to-setup-amazon-s3-in-a-django-project.html",
			"# 1. Install boto3 in the environment: pip install django-storages boto3",
			"# 2. Add 'storages' in installed applications",
			"\n",
			"# Copy the following in settings",
			"DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'",
			"\n",
			"STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'",
			"\n",
			"AWS_ACCESS_KEY_ID = ''",
			"\n",
			"AWS_SECRET_ACCESS_KEY = ''",
			"\n",
			"AWS_STORAGE_BUCKET_NAME = ''",
			"\n",
			"AWS_QUERYSTRING_AUTH = False",
			"\n",
			"AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME",
			"\n",
			"AWS_S3_OBJECT_PARAMETERS = {",
			"\t'CacheControl': 'max-age=86400'",
			"}",
			"\n",
			"AWS_LOCATION = 'static'",
			"\n",
			"STATIC_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)",
			"\n",
			"STATIC_ROOT = 'staticfiles'",
			"\n",
			"MEDIA_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, 'media')"
		],
		"description": "Django AWS static and media settings"
	},
	"Django Model Form": {
		"prefix": "django-model-form",
		"body": [
			"from django import forms",
			"from django.forms import ModelForm",
			"from django.forms.widgets import SelectDateWidget, TextInput, Select",
			"\n",
			"class ${1}Form(ModelForm):",
			"\tclass Meta:",
			"\t\tfields = ['']",
			"\t\twidgets = {",
			"\t\t\t\t'field': TextInput(attrs={})",			
			"\t\t}"
		],
		"description": "django-model-form"
	},
	"Django media and static urls": {
		"prefix": "django-media-static-urls",
		"body": [
			"from django.conf import settings",
			"from django.conf.urls.static import static",
			"\n",
			"if settings.DEBUG:",
			"\turlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
			"\turlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)"
		],
		"description": "Django media and static urls"
	},
	"Django email settings": {
		"prefix": "django-email-settings",
		"body": [
			"EMAIL_HOST = 'smtp.gmail.com'",
			"\n",
			"EMAIL_HOST_USER = 'email@gmail.com'",
			"\n",
			"EMAIL_HOST_PASSWORD = ''",
			"\n",
			"EMAIL_USE_TLS = True",
			"\n",
			"EMAIL_PORT = 587",
			"\n",
			"EMAIL_USE_LOCALTIME = True"
		],
		"description": "Django settings for sending emails"
	},
	"Django database settings": {
		"prefix": "django-database-settings",
		"body": [
			"'default': {",
			"\t'ENGINE': 'django.db.backends.postgresql',",
			"\t'NAME': '',",
			"\t'USER': 'postgres',",
			"\t'PASSWORD': '',",
			"\t'HOST': 'localhost',",
			"\t'PORT': '5432',",
			"}"
		],
		"description": "Django settings for database"
	}
}